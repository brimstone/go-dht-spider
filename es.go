package main

import (
	"net/http"
	"strings"
)

// Index indexes a document
func Index(host string, bodyJSON []byte) error {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	body := strings.NewReader(string(bodyJSON))
	req, err := http.NewRequest("POST", host, body)
	if err != nil {
		// handle err
		return err
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
		return err
	}
	defer resp.Body.Close()

	return nil
}

func SetTemplate(host string) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	body := strings.NewReader(`
{
  "template": "dht*",
  "settings": {
    "number_of_shards": 1
  },
  "mappings": {
    "infohash" : {
      "properties" : {
        "@timestamp" : {
          "type" : "date",
          "format" : "epoch_second"
        },
        "files" : {
          "properties" : {
            "length" : {
              "type" : "long"
            },
            "path" : {
              "type" : "string"
            }
          }
        },
        "infohash" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "request": {
      "properties": {
        "@timestamp": {
          "type": "date",
          "format": "epoch_second"
        },
        "address": {
          "type": "string"
        },
        "infohash": {
          "type": "string"
        },
        "port": {
          "type": "long"
        }
      }
    },
    "announce": {
      "properties": {
        "@timestamp": {
          "type": "date",
          "format": "epoch_second"
        },
        "address": {
          "type": "string"
        },
        "infohash": {
          "type": "string"
        },
        "port": {
          "type": "long"
        }
      }
    }
  }
}
`)
	req, err := http.NewRequest("PUT", host+"/_template/template_1", body)
	if err != nil {
		// handle err
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}
	defer resp.Body.Close()

}

func DeleteTemplate(host string) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	req, err := http.NewRequest("DELETE", host+"/_template/template_1", nil)
	if err != nil {
		// handle err
	}
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}
	defer resp.Body.Close()

}
